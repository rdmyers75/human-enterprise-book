axis.text.y = element_text(size = 15, color = "black"), # set font size and color of y axis text
panel.background =  element_rect(fill = "white", colour = NA), # set white background
panel.border =      element_rect(fill = NA, colour="black"), # set black border
panel.grid.major =  element_line(colour = "grey90", size = 0.2), # set major grid lines
panel.grid.minor =  element_line(colour = "grey98", size = 0.5) # set minor grid lines
) +
labs(x="Year", y = "Price (Constant 2012 USD)")
# change y (continuous) axis limits and intervals
oil_price_plot4 <- oil_price_plot3 +
scale_y_continuous(
limits=c(0,160),
breaks=seq(0,160,20)
)
# change x (discrete) axis limits and intervals
oil_price_plot5 <- oil_price_plot4 +
scale_x_discrete(
breaks=seq(1985, 2015, 5)
)
# print the plot
oil_price_plot5
###################################################################################
###################################################################################
# The code below does calculations, conversions, and creates
# Figure 10 in the book.
# Purpose: Convert GJ per tonne oil equivalent to J/kg oil equivalent
# Purpose: fit a trend line to energy supply data from Keay (2007)
# constants and assumptions
GJ_per_tonne_oe <- 42 # GJ per tonne oil equivalent
# calculation
J_per_kg <- # J energy in one kg of oil equivalent
GJ_per_tonne_oe * # GJ / tonne
1 / 1000 * # 1 tonne / 1000 kg
1e9 # 1e9 J / GJ
J_per_kg # print result
# also calculate kg C per J of energy used in 2000
kg_C_per_kgoe <- 0.76 # kg C per kg oil eqivalent
kg_C_per_J <- kg_C_per_kgoe / J_per_kg
kg_C_per_J # print result
# create a data frame from Table 3, p. 11
energy_supply_data <- data.frame(
year = c(1820, 1870, 1913, 1950, 1973, 2003),
energy_supply_MToe = c(221, 388, 1093, 2130, 6043, 10723)
)
# convert to J
energy_supply_data$energy_supply_J <- # annual energy supply in J
energy_supply_data$energy_supply_MToe * # energy supply in million metric tonnes of oil equivalent
1e6 * # tonnes / million tonnes
GJ_per_tonne_oe * # GJ per tonne oil equivalent
1e9 # 1e9 J per GJ
energy_supply_data$energy_supply_W <- # annual energy supply in W
energy_supply_data$energy_supply_J * # energy supply, J/yr
1 / 365 * # 1 yr / 365 days
1 / 24 * # 1 day / 24 hrs
1 / 60 * # 1 hr / 60 min
1 / 60 # 1 min / 60 s
energy_supply_data # print the data frame
# # plot the data
# plot(energy_supply_data$energy_supply_W~energy_supply_data$year,
#      xlab="Year",
#      ylab="Energy Supply (W)",
#      xlim=c(1800,2000),
# )
# lognormal curve fit
energy_supply_predicted_W <- glm(energy_supply_W~year,
data=energy_supply_data, family=gaussian(link="log"))
energy_supply_predicted_W  # print the regression results
energy_supply_data$energy_supply_predicted_trend_W <-
exp(-19.27185 + 0.02475*energy_supply_data$year)
energy_supply_data # print the data frame
# plot the predicted relationship overlaid on the data
# lines(
#   y=exp(-19.27185+0.02475*energy_supply_data$year),
#   x=energy_supply_data$year,
#   )
# plot using ggplot2
# assign data to be plotted
Energy_Supply_Plot1 <- ggplot(
data = energy_supply_data, # data set
aes(x = year, # x variable
y = energy_supply_W  # y variable
)
)
# assign type of plot and any statistics to calculate
Energy_Supply_Plot_2 <- Energy_Supply_Plot1 +
geom_point(color = "blue", size = 6, shape = 1)
Energy_Supply_Plot_2
# add an exponential trend line
Energy_Supply_Plot_3 <- Energy_Supply_Plot_2 +
geom_smooth(method="glm",family=gaussian(link="log"), se=FALSE,
color = "blue", size = 1.25)
Energy_Supply_Plot_3
# assign a theme
Energy_Supply_Plot_4 <- Energy_Supply_Plot_3 +
theme_bw()  # a basic black and white theme
# set axis labels, scales, and intervals
Energy_Supply_Plot_5 <- Energy_Supply_Plot_4 +
scale_x_continuous(
name = "Year", # x axis label
limits = c(1820, 2020), # set x axis limits
breaks = seq(1820, 2020, 20), # x axis limits and interval
#     minor_breaks = function(x) log10(x)/10, # specify minor breaks (NOT DEBUGGED)
expand = c(0.01,0) # control where y axis crosses - first number is fraction of plot left as white space
#     labels = c("Years", "", "Decades", "", "Centuries", "") # replace x-axis numbers with text labels
) +
scale_y_continuous(
name = ("Energy Supply (W)"), # y axis label
limits = c(0, 1.6e13), # set y axis limits
breaks = seq(0, 1.6e13, 2e12), # set breaks and tick marks
expand = c(0.02,0) # control where x axis crosses - first number is fraction left as white space
)
# set font size of labels and numbers on axes
Energy_Supply_Plot_6 <- Energy_Supply_Plot_5 +
theme(
axis.title.x = element_text(size = 18), # set font size of x axis label
axis.text.x = element_text(size = 15), # set font size of x axis text
axis.title.y = element_text(size = 18), # set font size of y axis label
axis.text.y = element_text(size = 15), # set font size of y axis text
panel.grid.minor = element_line() # specify minor grid lines
)
Energy_Supply_Plot_6
# set tick marks
# calculate expected value in 2013
energy_use_2013 <- exp(-19.27185 + 0.02475*2013)
energy_use_2013 # print result
###################################################################################
# Purpose: Convert feedback relationship from 10% / 1000 Gt to fraction/kg
# constants and assumptions
reduction_per1000Gt <- 0.165 # ~16.5% per 1000 Gt C
# calculation
reduction_perkg <- # dimensionless reduction in activity per kg C gap
reduction_per1000Gt * # fraction / 1000 Gt
1 / 1000e9 * # 1000 Gt / 1000e9 tonnes
1 / 1000 # 1 tonne / 1000 kg
reduction_perkg # print result
###################################################################################
Purpose: estimate natural capital depletion per unit of energy used
energy_consumption_2012_J <- # 2012 energy consumption in J
12476.6 * # million tonnes oil equivalent
1e6 * # tonnes / millon tonnes
42 * # GJ / tonne oil equivalent
1e9 # J/GJ
# result: 5.24e20 J (matches supply estimate very well)
# fit curve to fossil fuel portion of energy supply
# fossil fuel portion according to Keay ~ 89.6% of total
fossil_fuel_fraction <- 9579 / (9579 + 1114)
fossil_fuel_portion_J <- energy_consumption_2012_J * fossil_fuel_fraction
# estimate new natural capital depletion as primary productivity
C_from_fossil_fuels_2012_kg <- # 8.49e12 kg C from fossil fuel use
fossil_fuel_portion_J *
kg_C_per_J
# appropriation plus fossil fuel carbon emissions
# human appropriation of primary productivity
human_appropriation_of_NPP_kgC <- # 2.0368e13 kg C / yr
NPP_kgyr * 0.38
# estimate new natural capital depletion per J of energy used
new_estimate_natural_capital_depletion_kgCperyr <- # 2.89e13 kg C / yr
human_appropriation_of_NPP_kgC +
C_from_fossil_fuels_2012_kg
new_estimate_nat_cap_depl_kgCperJperyr <- # 5.5079e-8
new_estimate_natural_capital_depletion_kgCperyr /
energy_consumption_2012_J
###################################################################################
# Purpose: data from Costanza, 1997 and IMF, 1999
###################################################################################
Costanza_data <- data.frame(
service =           c("Gas_regulation",
"Climate_regulation",
"Disturbance_regulation",
"Water_regulation",
"Water_supply",
"Erosion_control",
"Soil_formation",
"Nutrient_cycling",
"Waste_treatment",
"Pollination",
"Biological_control",
"Habitat_refugia",
"Food_production",
"Raw_materials",
"Genetic_resources",
"Recreation",
"Cultural",
"GDP"),
value_1997USDe9 = c(1341,
684,
1779,
1115,
1692,
576,
53,
17075,
2277,
117,
417,
124,
1386,
721,
79,
815,
3015,
29477.15),
category = c(rep("ecosystem_service", 17), "GDP")
)
###################################################################################
# Purpose: data on probability of disaster
###################################################################################
# this is the database of war, plague, and disaster probabilities
#   event (character string): name of the event
#   probability (fraction): total probability of event, for entire duration
#   duration_frac (fraction): fraction of the time this risk is active
#   percent_killed (%): estimated percentage of world population killed by
#     this event
#   Note: "-99999" is a placeholder number
#   Assumptions:
#     - something like the Cold War will happen about once a century, and
#       last about 40 years
#     - assume estimated species extinction rate from Chicxulub impact 65
#       million years ago, and Permian extinction 250 million years ago, is
#       a good guide to fraction of human beings that would be killed
#     - a dumb physics experiment, such as a miniature black hole or
#       nanobots capable of self-replication, will be run for about 10 years
#       each century; result of a mishap would be to destroy all life
disaster_database <- data.frame(
event = c("global_nuclear_war",
"asteroid_10km",
"physics_experiment_amok"),
probability = c(1/6,
1/75e6,
1/50e6),
duration_frac = c(40/100,
1,
10/100),
percent_killed = c(-99999,
-99999,
100),
reference = c("Rees, Loc 406", "Rees, Loc 1264", "Rees, Loc 1709")
)
###################################################################################
# Purpose: convert erg/s to W
Kardashev_I_W <- 4e19 * # erg/s
1e-7 # W / erg/s
Kardashev_II_W <- 4e33 * # erg/s
1e-7 # W / erg/s
Kardashev_III_W <- 4e44 * # erg/s
1e-7 # W / erg/s
Kardashev_I_W
Kardashev_II_W
Kardashev_III_W
# Purpose: This script performs the simulation and produces the results
# shown in Figures 12 and 13 in the book Human Enterprise, Ecosystems,
# and the Future of Civilization. In this simulation, there is no
# progress in "green technology". The simulation runs for 1,000 years.
###################################################################################
# load libraries
library("ggplot2")
library("grid")
library("scales")
###################################################################################
# CONSTANTS AND AUXILIARY VARIABLES
# run controls
starting_year <- 1
ending_year <- 1000
# constants
Rate_of_Increase_in_Human_Activity <- 0.02475 # /yr
Primary_Productivity <- 5.36e13 # kg C/yr
Replenishment_of_Natural_Capital <- Primary_Productivity
Unit_Depletion_of_Natural_Capital_t0 <- 5.5079e-08 # kg C / J/yr human activity
#Rate_of_Decrease_in_Unit_Depletion_of_Natural_Capital <- 0.0025 # /yr
Rate_of_Decrease_in_Unit_Depletion_of_Natural_Capital <- 0 # /yr
Effect_of_Natural_Capital_Depletion_on_Human_Activity <- 1.65e-16 # / kg C
Decrease_in_Human_Activity_t0 <- 0
Natural_Capital_Gap_t0 <- 0
# initialize stocks
Natural_Capital_t0 <- 1.70e15
Natural_Capital_NCU_t0 <- 100
Human_Activity_t0 <- 5.84063e20
Human_Activity_W_t0 <- # human activity, W
Human_Activity_t0 * # human activity, J/yr
1 * # 1 W / J/s
1 / (365 * 24 * 60 * 60) # 1 yr / (365 d/yr * 24 hr/d * 60 min/hr * 60 s/min
Kardashev_Scale_t0 <- (log(Human_Activity_W_t0, 10) - 6) / 10
###################################################################################
###################################################################################
# STOCK 1: Human_Activity
# Units: J/yr
# Initial Value:
#   Human_Activity_t0 <- 5.84063e14
#
# Inflow: Increase_in_Human_Activity
# Units: J/yr/yr
# Relationship:
#   Human_Activity (J/yr) * Rate_of_Increase_in_Human_Activity (/yr)
# Outflow: Decrease_in_Human_Activity
# Units: J/yr/yr
# Relationship:
#   (Natural_Capital_t0, kg C - Natural_Capital, kg C) *
#     Effect_of_Natural_Capital_Depletion_on_Human_Activity, J/yr/yr / kg C)
#
###################################################################################
# STOCK 2: Natural_Capital
# Units: kg C
# Initial Value:
# Natural_Capital_t0 <- 1.70e15
# Constraint: must be <= initial value
#
# Inflow: Replenishment_of_Natural_Capital
# Units: kg C/yr
# Relationship: = Primary_Productivity (kg C/yr)
# Outflow: Depletion_of_Natural_Capital
# Units: kg C/yr
# Relationship:
#   Initial Value: Depletion_of_Natural_Capital_t0, (kg C/J/yr)
#   Thereafter: Effect_of_Natural_Capital_Depletion_on_Human_Activity(t-1), (kg C/J/yr) *
#     (1 - Rate_of_Decrease_in_Depletion_of_Natural_Capital), (/yr) *
#     Human_Activity(t-1) (J/yr)
# Natural_Capital <- min(Natural_Capital, Natural_Capital_t0)
#
###################################################################################
# SIMULATION
#
# initialize values
year <- starting_year
Depletion_of_Natural_Capital_t0 <-
Unit_Depletion_of_Natural_Capital_t0 * Human_Activity_t0
Output <- c(year,
Human_Activity_t0,
Human_Activity_W_t0,
Kardashev_Scale_t0,
Natural_Capital_t0,
Natural_Capital_NCU_t0,
Replenishment_of_Natural_Capital,
Unit_Depletion_of_Natural_Capital_t0,
Depletion_of_Natural_Capital_t0,
Natural_Capital_Gap_t0,
Decrease_in_Human_Activity_t0)
Human_Activity <- Human_Activity_t0
Natural_Capital <- Natural_Capital_t0
Unit_Depletion_of_Natural_Capital <- Unit_Depletion_of_Natural_Capital_t0
# complete simulation
while (year < ending_year) {
Output_tminus1 <- Output
year <- year + 1
# increment rate of natural capital depletion per unit human activity
Unit_Depletion_of_Natural_Capital <-
Unit_Depletion_of_Natural_Capital *
(1 - Rate_of_Decrease_in_Unit_Depletion_of_Natural_Capital)
Depletion_of_Natural_Capital <-
Unit_Depletion_of_Natural_Capital * Human_Activity
Natural_Capital_Gap <- Natural_Capital_t0 - Natural_Capital
Decrease_in_Human_Activity <-
Natural_Capital_Gap *
Effect_of_Natural_Capital_Depletion_on_Human_Activity *
Human_Activity
# perform mass balance on stocks
Human_Activity <-
Human_Activity +
Human_Activity * Rate_of_Increase_in_Human_Activity -
Decrease_in_Human_Activity
Natural_Capital <-
Natural_Capital +
Replenishment_of_Natural_Capital -
Depletion_of_Natural_Capital
#constrain natural capital to less than or equal to initial value
Natural_Capital <- min(Natural_Capital, Natural_Capital_t0)
Natural_Capital <- max(Natural_Capital, 0)
# define an arbitrary unit of natural capital
Natural_Capital_NCU <- Natural_Capital * 100 / Natural_Capital_t0
# calculate human activity in W and the Kardashev Scale
Human_Activity_W <- # human activity, W
Human_Activity * # human activity, J/yr
1 * # 1 W / J/s
1 / (365 * 24 * 60 * 60) # 1 yr / (365 d/yr * 24 hr/d * 60 min/hr * 60 s/min
Kardashev_Scale <- (log(Human_Activity_W, 10) - 6) / 10
# add newest values to output data set
new_output <- c(year,
Human_Activity,
Human_Activity_W,
Kardashev_Scale,
Natural_Capital,
Natural_Capital_NCU,
Replenishment_of_Natural_Capital,
Unit_Depletion_of_Natural_Capital,
Depletion_of_Natural_Capital,
Natural_Capital_Gap,
Decrease_in_Human_Activity)
names(new_output) <- c("Year",
"Human_Activity_Jyr",
"Human_Activity_W",
"Kardashev_Scale",
"Natural_Capital",
"Natural_Capital_NCU",
"Replenishment_of_Natural_Capital",
"Unit_Depletion_of_Natural_Capital",
"Depletion_of_Natural_Capital",
"Natural_Capital_Gap",
"Decrease_in_Human_Activity")
Output <- rbind(Output, new_output)
} # end of simulation loop
#Output # uncomment to print output data set if desired
# plot outputs in ggplot2
# convert from a matrix to a data frame (required for ggplot)
Output_df <- as.data.frame(Output)
# PLOT HUMAN ACTIVITY
# assign data to be plotted
Human_Activity_Plot_1 <- ggplot(
data = Output_df, # data set
aes(x = Output_df$Year, # x variable
y = Output_df$Human_Activity_W # y variable
),
)
# assign type of plot and any statistics to calculate
Human_Activity_Plot_2 <- Human_Activity_Plot_1 +
geom_line( # a basic line
stat = "identity", # plot the actual value, no statistical transformation
color = "blue", # set the line color
size = 1.25 # set the line width
)
# assign a theme
Human_Activity_Plot_3 <- Human_Activity_Plot_2 +
theme_bw()  # a basic black and white theme
# log transform axes
Human_Activity_Plot_6 <- Human_Activity_Plot_3 +
coord_trans(
x = "log10", # transform x axis to log scale
y = "log10" # transform y axis to log scale
)
# set axis labels, scales, and intervals
Human_Activity_Plot_7 <- Human_Activity_Plot_6 +
scale_x_continuous(
name = "Years", # x axis label
limits = c(1, 1000), # set x axis limits
breaks = c(5, 10, 50, 100, 500, 1000), # x axis limits and interval
minor_breaks = function(x) log10(x)/10, # specify minor breaks (NOT DEBUGGED)
expand = c(0.01,0) # control where y axis crosses - first number is fraction of plot left as white space
#     labels = c("Years", "", "Decades", "", "Centuries", "") # replace x-axis numbers with text labels
) +
scale_y_continuous(
name = ("Human Activity (W)"), # y axis label
limits = c(1e13, 5e13), # set y axis limits
breaks = c(1e13, 2e13, 3e13, 4e13, 5e13), # set breaks and tick marks
expand = c(0.02,0) # control where x axis crosses - first number is fraction left as white space
)
# set font size of labels and numbers on axes
Human_Activity_Plot_8 <- Human_Activity_Plot_7 +
theme(
axis.title.x = element_text(size = 18), # set font size of x axis label
axis.text.x = element_text(size = 15), # set font size of x axis text
axis.title.y = element_text(size = 18), # set font size of y axis label
axis.text.y = element_text(size = 15), # set font size of y axis text
panel.grid.minor = element_line() # specify minor grid lines (NOT DEBUGGED)
)
# set tick marks
Human_Activity_Plot_9 <- Human_Activity_Plot_8 +
annotation_logticks( # adds tick marks to a log scale
scaled = FALSE # tells R we have transformed the axis, not the data
)
Human_Activity_Plot_9
# PLOT NATURAL CAPITAL
# assign data to be plotted
Natural_Capital_Plot_1 <- ggplot(
data = Output_df, # data set
aes(x = Output_df$Year, # x variable
y = Output_df$Natural_Capital # y variable
),
)
# assign type of plot and any statistics to calculate
Natural_Capital_Plot_2 <- Natural_Capital_Plot_1 +
geom_line( # a basic line
stat = "identity", # plot the actual value, no statistical transformation
color = "blue", # set the line color
size = 1.25 # set the line width
)
# assign a theme
Natural_Capital_Plot_3 <- Natural_Capital_Plot_2 +
theme_bw()  # a basic black and white theme
# log transform axes
Natural_Capital_Plot_4 <- Natural_Capital_Plot_3 +
coord_trans(
x = "log10", # transform x axis to log scale
y = "log10" # transform y axis to log scale
)
# set axis labels, scales, and intervals
Natural_Capital_Plot_5 <- Natural_Capital_Plot_4 +
scale_x_continuous(
name = "Years", # x axis label
limits = c(1, 1000), # set x axis limits
breaks = c(5, 10, 50, 100, 500, 1000), # x axis limits and interval
minor_breaks = function(x) log10(x)/10, # specify minor breaks (NOT DEBUGGED)
expand = c(0.01,0) # control where y axis crosses - first number is fraction of plot left as white space
#     labels = c("Years", "", "Decades", "", "Centuries", "") # replace x-axis numbers with text labels
) +
scale_y_continuous(
name = ("Natural Capital (kg C)"), # y axis label
limits = c(1.3e15, 1.8e15), # set y axis limits
breaks = c(1.3e15, 1.4e15, 1.5e15, 1.6e15, 1.7e15, 1.8e15), # set breaks and tick marks
expand = c(0.02,0) # control where x axis crosses - first number is fraction left as white space
)
# set font size of labels and numbers on axes
Natural_Capital_Plot_6 <- Natural_Capital_Plot_5 +
theme(
axis.title.x = element_text(size = 18), # set font size of x axis label
axis.text.x = element_text(size = 15), # set font size of x axis text
axis.title.y = element_text(size = 18), # set font size of y axis label
axis.text.y = element_text(size = 15), # set font size of y axis text
panel.grid.minor = element_line() # specify minor grid lines (NOT DEBUGGED)
)
# set tick marks
Natural_Capital_Plot_7 <- Natural_Capital_Plot_6 +
annotation_logticks( # adds tick marks to a log scale
scaled = FALSE # tells R we have transformed the axis, not the data
)
Natural_Capital_Plot_7
